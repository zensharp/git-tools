#!/usr/bin/env bash

set -eu

# Configuration
export remote="origin"
export mainBranch="main"
export head=$(git branch --show-current)

# Functions
function evalSafe
{
	if [ $dryRun = true ] ; then
		echo "[DRY RUN] $1"
	else
		eval "$1"
	fi
}
export -f evalSafe

function switchBranch
{
	branchName=$1
	evalSafe "git checkout -b $branchName || git switch $branchName"
}
export -f switchBranch

function deleteBranch
{
	branchName=$1
	if [ "$branchName" == "$head" ]; then
		evalSafe "git checkout $mainBranch"
		echo "[INFO] The feature branch '$branchName' was checked out." 
	fi
	evalSafe "git branch -d $branchName"
}
export -f deleteBranch

function parseFeatureName
{
	name=$1
	if echo $name | grep -q '^feature/'
	then
		name=${name#feature/}
		if echo $name | grep -q '^[[:digit:]]*$'
		then
			name="#$name"
		else
			name="feature \"$name\""
		fi
	fi

	echo $name
}
export -f parseFeatureName

## Actions
function start
{
	name=$1
	switchBranch "feature/$name"
}

function drop
{
	name=$1
	deleteBranch "feature/$name"
}

function prune
{
	git branch --format='%(refname:short)' --merged $remote/$mainBranch |
		grep "^feature/" |
		xargs -I {} bash -c "deleteBranch '{}'"
}

function commit
{
	template=$(mktemp -t git-feature_XXXXXXXX)
	export template

	function run
	{
		branch=$(git branch --show-current)
		name=$(parseFeatureName $branch)
		cat > $template << EOL


implementing $name
EOL

		git commit --template $template
	}

	function cleanup
	{
		exitCode=$?
		rm -rf template 2> /dev/null
		exit $exitCode
	}

	run && cleanup || cleanup
}

function status
{
	git diff --name-status $(git merge-base HEAD main)
}

# Begin script
if [[ "$*" == *--dry-run* ]]
then
	export dryRun=true
else
	export dryRun=false
fi

verb=$1
shift

case "$verb" in
	start)
		start $@
		;;
	drop)
		drop $@
		;;
	prune)
		prune $@
		;;
	commit)
		commit $@
		;;
	status)
		status $@
		;;
	*)
		echo "Invalid verb '$verb'"
		exit 1
		;;
esac
